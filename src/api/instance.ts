import axios from "axios"

const instance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000/api/",
  withCredentials: true, // –≤–∞–∂–Ω–æ: —á—Ç–æ–±—ã –∫—É–∫–∞ —Å refreshToken –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∞—Å—å
})

// üëâ –î–æ–±–∞–≤–ª—è–µ–º accessToken –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
instance.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken")
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// üëâ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ accessToken –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)
instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config

    // –ï—Å–ª–∏ accessToken –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !originalRequest.url.includes("/auth/refresh")
    ) {
      originalRequest._retry = true

      try {
        const res = await instance.post("/auth/refresh") // —Å withCredentials
        const newAccessToken = res.data.accessToken
        localStorage.setItem("accessToken", newAccessToken)

        // –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`
        return instance(originalRequest)
      } catch (refreshError) {
        console.error("Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω Instance")
        // –Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return Promise.reject(refreshError)
      }
    }

    return Promise.reject(error)
  }
)

export default instance
